@startuml
!include plantuml-ae-style.iuml

'skinparam ActivityDiamondBackgroundColor white


skinparam note {
  FontSize          14
  FontStyle         normal
  FontName          "times"
  FontColor         DEFAULT_FONT_COLOR
  BackgroundColor   white
  BorderColor       white
  Linetype none
  Arrow {
     Color blue
     Thickness 3
   }
}


' oddly, this is the font style for class associations (even though it is in the "activity" group):
skinparam activity {

    Arrow {
        Color       DEFAULT_NOT_SO_DARK
        'FontColor   DEFAULT_NOT_SO_DARK
        FontSize    12
        FontStyle   normal
    }
}




title
This is how <b>Updaters</b> are related to  <b>Requirement Checkers</b>.

They work together to see if requirements have been met
and then to take whatever action (<i>updating</i> or <i>revoking</i> or <i>no action</i>)
is needed.

Updaters take the action.
Requirements Checkers see if requirements have been met.
end title


package Requirement_Checkers {



  abstract class AbstractRequirements {
  \nThis is the public method for all 'Updaters':\n
    +self.satisfied?(args= {})
  \n
--
    self.has_expected_arguments?(args)
    self.requirements_met?(args)
  }


  RequirementForMembership <|-- AbstractRequirements
  class RequirementForMembership {
    self.has_expected_arguments?(args)
    self.requirements_met?(args)
  }


  RequirementForRevokingMembership <|-- AbstractRequirements
  class RequirementForRevokingMembership {
    self.has_expected_arguments?(args)
    self.requirements_met?(args)
  }



note bottom of AbstractRequirements
 <b>Requirements</b> classes are responsible for answering
  'true' or 'false' if requirements have been met.

  They are the single place that needs to be changed if the
  business requirements change.
  <i>(This encapsulates/isolates the responsibility.)</i>
end note


}



package Updaters {

  AbstractUpdater <|-left- Singleton

  skinparam TextAlignment left AbstractUpdater

  abstract class AbstractUpdater {
\nThis is the public method for all 'Updaters':\n
+ check_requirements_and_act(args = {})
\n

--

\nEach subclass has methods for doing what needs to be done
     to update or revoke:
     - self.update_action(args = {})
     - self.revoke_update_action(args = {})

\n
    Each subclass sets the specific class that checks requirements
    for updating and revoking:
    - self.update_requirements_checker
    - self.revoke_requirements_checker

  }



  MembershipStatusUpdater <|-- AbstractUpdater

  class MembershipStatusUpdater {
    self.update_requirements_checker
    self.revoke_requirements_checker

    update_action(args)
    revoke_update_action(args = {})

  }
  MembershipStatusUpdater *-- RequirementForMembership
  note on link: sends <b>.satisfied?</b> \nto this class to see if\nrequirements are met for updating
  MembershipStatusUpdater *-right- RequirementForRevokingMembership
  note on link: sends <b>.satisfied?</b> \nto this class to see if\nrequirements are met for revoking




  note bottom of AbstractUpdater
   The <b>Updater</b> classes are responsible for taking action
    (update or revoke) if requirements have been met.

    Objects send the <b>.check_requirements_and_act</b> method
     to Updater and they do whatever needs to be done.

    <b>Updaters</b> ask the <b>Requirements</b> classes if requirements are met
    via the <b>.satisfied?</b> method
  end note

}


footer Generated by PlantUML and GraphViz  docs/wiki/requirements.puml

@enduml
